/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


enclave {
	
	// Import the Ocalls for trusted mutex

    trusted {
    	public void ecall_ttruth([out, count=cnt]int* question_top_k_user,int question_num,int user_num, int top_k, int cluster_size,int vector_size, int cnt);
    	public void test();
    };

    untrusted {
    	void ocall_load_question_solutions_v2()
    	void ocall_query_solution_size(int question_id,[out,count=user_num]int *user_solution_size, int user_num);
    	void ocall_load_question_solutions(int question_id, [out,count=len] char* solutions, int len);
    	void ocall_load_words_vectors([in,string]char *raw_words, [in, count=word_num]int *words_size,[out,count=vec_len]float* vectors, int word_num, int vec_len);
    	void ocall_filter_keywords([in, string]char * raw_words, [in, count=word_num] int* words_size, [out,count=word_num] int *words_filter_ind, int word_num);
		void ocall_print_string([in, string] const char *string);
		void ocall_print_float_array([in, count=len] float *arr,int len);
		void ocall_print_int_array([in, count=len] int *arr, int len);
    };
};
