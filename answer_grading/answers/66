This is on the runtime order of log(n) where n is the number of nodes in the binary tree.
In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.
n-1/2 is the algorithm to compare and find an element.
At most its equivalent to the height of the tree.
Log(n)
O(log n)
Depends on what half of the tree and the levels you have.
O(log n) in balanced trees
n-1
log(n)
O(nlog(n))
nLog(n)
logn
at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.
O(n)
It takes at most 3 comparisons to find and element in a binary search tree
log (n) where n equals the number of nodes.
it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level
At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.
O(log n)
log n comparisons
(n^k)-1 where k is the height of the tree
it takes h comparisons, where h is the height of the tree
2 way key comparison
